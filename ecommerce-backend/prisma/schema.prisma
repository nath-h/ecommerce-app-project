generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  firstName    String
  lastName     String
  password     String
  phone        String
  address      String
  isAdmin      Boolean       @default(false)
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  adminActions AdminAction[]
  cart         Cart?
  orders       Order[]
}

model Product {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  price       Decimal     @db.Decimal(6, 2)
  type        ProductType
  icon        String      @default("spoon-and-fork")
  isActive    Boolean     @default(true)
  isFeatured  Boolean     @default(false)
  stock       Int         @default(3)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Order {
  id                String      @id @default(cuid())
  userId            Int?
  subtotal          Decimal     @db.Decimal(6, 2)
  discount          Decimal?    @db.Decimal(6, 2)
  total             Decimal     @db.Decimal(6, 2)
  status            OrderStatus @default(PENDING)
  notes             String?
  couponCode        String?
  couponDiscount    Decimal?    @db.Decimal(6, 2)
  couponType        String?
  couponValue       Decimal?    @db.Decimal(6, 2)
  couponDescription String?
  customerName      String
  customerEmail     String
  customerPhone     String
  customerAddress   String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User?       @relation(fields: [userId], references: [id])
  orderItems        OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal? @db.Decimal(6, 2)
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

model Coupon {
  id          String     @id @default(cuid())
  code        String     @unique
  type        CouponType
  value       Decimal    @db.Decimal(6, 2)
  description String?
  minOrder    Decimal?    @db.Decimal(6, 2)
  maxDiscount Decimal?   @db.Decimal(6, 2)
  isActive    Boolean    @default(true)
  expiresAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  userId    Int?       @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model AdminAction {
  id         String          @id @default(cuid())
  adminId    Int
  action     AdminActionType
  entityType String
  entityId   String
  details    String?
  createdAt  DateTime        @default(now())
  admin      User            @relation(fields: [adminId], references: [id])
}

enum AdminActionType {
  CREATED_PRODUCT
  UPDATED_PRODUCT
  DEACTIVATED_PRODUCT
  REACTIVATED_PRODUCT
  CREATED_USER
  UPDATED_USER
  DEACTIVATED_USER
  REACTIVATED_USER
  CREATED_COUPON
  UPDATED_COUPON
  DEACTIVATED_COUPON
  REACTIVATED_COUPON
  CREATED_ORDER
  UPDATED_ORDER
  CANCELLED_ORDER
}

enum CouponType {
  PERCENTAGE
  FIXED
}

enum OrderStatus {
  PENDING
  PREPARING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ProductType {
  FRUIT
  VEGETABLE
  MEAT
  OTHER
}
